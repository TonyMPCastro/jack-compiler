<tokens>
<keyword> class </keyword>
<identifier> GradeCalculator </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> n1 </identifier>
<symbol> , </symbol>
<identifier> n2 </identifier>
<symbol> , </symbol>
<identifier> n3 </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> average </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> GradeCalculator </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> grade1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> grade2 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> grade3 </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> n1 </identifier>
<symbol> = </symbol>
<identifier> grade1 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> n2 </identifier>
<symbol> = </symbol>
<identifier> grade2 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> n3 </identifier>
<symbol> = </symbol>
<identifier> grade3 </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> calculateAverage </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> calculateAverage </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> average </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> n1 </identifier>
<symbol> + </symbol>
<identifier> n2 </identifier>
<symbol> + </symbol>
<identifier> n3 </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> checkApproval </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> checkApproval </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> average </identifier>
<symbol> &gt; </symbol>
<symbol> = </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Aprovado </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Reprovado </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
